# -*- coding: utf-8 -*-
"""Optimizer (Gloden_Ratio)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1orIQkUXrqzGBFBt6zvGBNUsksabU78Zp
"""

from numpy import cos

def derivative(input_fuction, x):
  '''
  return derivative of function of x
  '''
  h = 0.0001
  return (input_fuction(x + h) - input_fuction(x)) / h

def gloden_section(input_function,x0,xn,round,error) :
  '''
  find x where x is give a minimum value of function
  '''
  value = []
  a , b = x0 , xn
  gloden_ratio = ((5**(1/2)) + 1) / 2
  c = b - (b - a) / gloden_ratio
  d = a + (b - a) / gloden_ratio
  for i in range(round):
    print("round =", i)
    if input_function(c) < input_function(d):
      b = d
    else:
      a = c
    c = b - (b - a) / gloden_ratio
    d = a + (b - a) / gloden_ratio
    value.append((b + a) / 2)
    if abs(a-b) < error :
      print(abs(a-b))
      print("value not change !")
      return value

  return value

# objective_function = lambda x: 5*x**2 - 2*x - 1
objective_function = lambda x: (5*x**2) - (5*x) + 1
x = gloden_section(objective_function, -10, 10,1000 , 0.001)
print(x[-1])
derivative(objective_function, x[-1])

import matplotlib.pyplot as plt

plt.plot(x)