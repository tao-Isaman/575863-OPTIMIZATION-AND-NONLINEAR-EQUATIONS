# -*- coding: utf-8 -*-
"""Newton â€“ Raphson Methods

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10DQt5HDjHwmFHerXlhmTLv0GPpwwZGDw
"""

def derivative(input_fuction, x):
  '''
  return derivative of function of x
  '''
  h = 0.01
  return (input_fuction(x + h) - input_fuction(x)) / h

def newtow_rephson(input_fuction, x):
  '''
  x is a current value of fucntion

  return next x
  '''
  return x - (input_fuction(x) / derivative(input_fuction, x))

def find_root(max_round, input_fuction, a, b, error):
    
    round = 1
    ak = a
    bk = b 
    # inital estimates 
    previous_estimation  = a + b / 2

    while (max_round > round) :
      print("round no. " , round)
      next_estimation = newtow_rephson(input_fuction, previous_estimation)
      fuction_estimation = input_fuction(next_estimation)
      print('current f(x) = ', fuction_estimation)

      # increment become small
      if (abs(next_estimation - previous_estimation)) < error and round > 1:
          print("Found exact solution. increment become small")
          return fuction_estimation

      # resiual become small
      if abs(fuction_estimation) < error:
          print("Found exact solution. resiual become small")
          return fuction_estimation

      previous_estimation = next_estimation
      round = round + 1

    return newtow_rephson(input_fuction, previous_estimation)

objective_function = lambda x: x**3 - 5*x**2 - x + 1
approx_phi = find_root(1000, objective_function, -50, 100, 0.01)
print(approx_phi)
objective_function(approx_phi)